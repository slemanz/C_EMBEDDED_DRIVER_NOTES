
02_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000574  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000708  08000710  00010710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000708  08000708  00010710  2**0
                  CONTENTS
  4 .ARM          00000000  08000708  08000708  00010710  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000708  08000710  00010710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000708  08000708  00010708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800070c  0800070c  0001070c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000710  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000710  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010710  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010740  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000980  00000000  00000000  00010783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000286  00000000  00000000  00011103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00011390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000085  00000000  00000000  00011450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000137c  00000000  00000000  000114d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ce8  00000000  00000000  00012851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000051b8  00000000  00000000  00013539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000024c  00000000  00000000  000186f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00018940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006f0 	.word	0x080006f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006f0 	.word	0x080006f0

080001d4 <delay>:
/// when a external button is pressed, turn on a led

#define BTN_PRESSED 0

void delay(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 5000000; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	004c4b3f 	.word	0x004c4b3f

08000200 <main>:

int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = GPIOC;
 8000206:	4b16      	ldr	r3, [pc, #88]	; (8000260 <main+0x60>)
 8000208:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 800020a:	230b      	movs	r3, #11
 800020c:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800020e:	2301      	movs	r3, #1
 8000210:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000216:	2300      	movs	r3, #0
 8000218:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800021a:	2300      	movs	r3, #0
 800021c:	74fb      	strb	r3, [r7, #19]



	GPIO_Handle_t GpioButton;

	GpioButton.pGPIOx = GPIOC;
 800021e:	4b10      	ldr	r3, [pc, #64]	; (8000260 <main+0x60>)
 8000220:	603b      	str	r3, [r7, #0]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8000222:	230a      	movs	r3, #10
 8000224:	713b      	strb	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000226:	2300      	movs	r3, #0
 8000228:	717b      	strb	r3, [r7, #5]
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022a:	2302      	movs	r3, #2
 800022c:	71bb      	strb	r3, [r7, #6]
	GpioButton.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800022e:	2300      	movs	r3, #0
 8000230:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000232:	2301      	movs	r3, #1
 8000234:	71fb      	strb	r3, [r7, #7]




	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000236:	2101      	movs	r1, #1
 8000238:	4809      	ldr	r0, [pc, #36]	; (8000260 <main+0x60>)
 800023a:	f000 f83d 	bl	80002b8 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 800023e:	f107 030c 	add.w	r3, r7, #12
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f896 	bl	8000374 <GPIO_Init>
	GPIO_Init(&GpioButton);
 8000248:	463b      	mov	r3, r7
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f892 	bl	8000374 <GPIO_Init>

	while(1)
	{

	GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_11);
 8000250:	210b      	movs	r1, #11
 8000252:	4803      	ldr	r0, [pc, #12]	; (8000260 <main+0x60>)
 8000254:	f000 fa12 	bl	800067c <GPIO_ToggleOutputPin>
	delay(); // debouncing
 8000258:	f7ff ffbc 	bl	80001d4 <delay>
	GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_11);
 800025c:	e7f8      	b.n	8000250 <main+0x50>
 800025e:	bf00      	nop
 8000260:	40020800 	.word	0x40020800

08000264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	; (80002a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	; (80002a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <LoopForever+0xe>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	; (80002b0 <LoopForever+0x16>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000292:	f000 fa09 	bl	80006a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000296:	f7ff ffb3 	bl	8000200 <main>

0800029a <LoopForever>:

LoopForever:
  b LoopForever
 800029a:	e7fe      	b.n	800029a <LoopForever>
  ldr   r0, =_estack
 800029c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a8:	08000710 	.word	0x08000710
  ldr r2, =_sbss
 80002ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b0:	2000001c 	.word	0x2000001c

080002b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC_IRQHandler>
	...

080002b8 <GPIO_PeriClockControl>:
 *
 */


void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	460b      	mov	r3, r1
 80002c2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d140      	bne.n	800034c <GPIO_PeriClockControl+0x94>
	{
		if		(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a22      	ldr	r2, [pc, #136]	; (8000358 <GPIO_PeriClockControl+0xa0>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d106      	bne.n	80002e0 <GPIO_PeriClockControl+0x28>
 80002d2:	4b22      	ldr	r3, [pc, #136]	; (800035c <GPIO_PeriClockControl+0xa4>)
 80002d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d6:	4a21      	ldr	r2, [pc, #132]	; (800035c <GPIO_PeriClockControl+0xa4>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6313      	str	r3, [r2, #48]	; 0x30
		else if	(pGPIOx == GPIOH) GPIOH_PCLK_EN();
	}else
	{
		// TODO
	}
}
 80002de:	e035      	b.n	800034c <GPIO_PeriClockControl+0x94>
		else if	(pGPIOx == GPIOB) GPIOB_PCLK_EN();
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a1f      	ldr	r2, [pc, #124]	; (8000360 <GPIO_PeriClockControl+0xa8>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d106      	bne.n	80002f6 <GPIO_PeriClockControl+0x3e>
 80002e8:	4b1c      	ldr	r3, [pc, #112]	; (800035c <GPIO_PeriClockControl+0xa4>)
 80002ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ec:	4a1b      	ldr	r2, [pc, #108]	; (800035c <GPIO_PeriClockControl+0xa4>)
 80002ee:	f043 0302 	orr.w	r3, r3, #2
 80002f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f4:	e02a      	b.n	800034c <GPIO_PeriClockControl+0x94>
		else if	(pGPIOx == GPIOC) GPIOC_PCLK_EN();
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a1a      	ldr	r2, [pc, #104]	; (8000364 <GPIO_PeriClockControl+0xac>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_PeriClockControl+0x54>
 80002fe:	4b17      	ldr	r3, [pc, #92]	; (800035c <GPIO_PeriClockControl+0xa4>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000302:	4a16      	ldr	r2, [pc, #88]	; (800035c <GPIO_PeriClockControl+0xa4>)
 8000304:	f043 0304 	orr.w	r3, r3, #4
 8000308:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030a:	e01f      	b.n	800034c <GPIO_PeriClockControl+0x94>
		else if	(pGPIOx == GPIOD) GPIOD_PCLK_EN();
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a16      	ldr	r2, [pc, #88]	; (8000368 <GPIO_PeriClockControl+0xb0>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_PeriClockControl+0x6a>
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <GPIO_PeriClockControl+0xa4>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000318:	4a10      	ldr	r2, [pc, #64]	; (800035c <GPIO_PeriClockControl+0xa4>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000320:	e014      	b.n	800034c <GPIO_PeriClockControl+0x94>
		else if	(pGPIOx == GPIOE) GPIOE_PCLK_EN();
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a11      	ldr	r2, [pc, #68]	; (800036c <GPIO_PeriClockControl+0xb4>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClockControl+0x80>
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <GPIO_PeriClockControl+0xa4>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	4a0b      	ldr	r2, [pc, #44]	; (800035c <GPIO_PeriClockControl+0xa4>)
 8000330:	f043 0310 	orr.w	r3, r3, #16
 8000334:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000336:	e009      	b.n	800034c <GPIO_PeriClockControl+0x94>
		else if	(pGPIOx == GPIOH) GPIOH_PCLK_EN();
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <GPIO_PeriClockControl+0xb8>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d105      	bne.n	800034c <GPIO_PeriClockControl+0x94>
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <GPIO_PeriClockControl+0xa4>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a05      	ldr	r2, [pc, #20]	; (800035c <GPIO_PeriClockControl+0xa4>)
 8000346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40020000 	.word	0x40020000
 800035c:	40023800 	.word	0x40023800
 8000360:	40020400 	.word	0x40020400
 8000364:	40020800 	.word	0x40020800
 8000368:	40020c00 	.word	0x40020c00
 800036c:	40021000 	.word	0x40021000
 8000370:	40021c00 	.word	0x40021c00

08000374 <GPIO_Init>:
 *
 * @Note			- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000374:	b480      	push	{r7}
 8000376:	b087      	sub	sp, #28
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporary register
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]

	// 1. configure the mode of the gpio pin
	
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	795b      	ldrb	r3, [r3, #5]
 8000384:	2b03      	cmp	r3, #3
 8000386:	d820      	bhi.n	80003ca <GPIO_Init+0x56>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	795b      	ldrb	r3, [r3, #5]
 800038c:	461a      	mov	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	791b      	ldrb	r3, [r3, #4]
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	fa02 f303 	lsl.w	r3, r2, r3
 8000398:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	791b      	ldrb	r3, [r3, #4]
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	2103      	movs	r1, #3
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	43db      	mvns	r3, r3
 80003ae:	4619      	mov	r1, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	400a      	ands	r2, r1
 80003b6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	6819      	ldr	r1, [r3, #0]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	697a      	ldr	r2, [r7, #20]
 80003c4:	430a      	orrs	r2, r1
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	e0af      	b.n	800052a <GPIO_Init+0x1b6>
	}else
	{
		//1. configure interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	795b      	ldrb	r3, [r3, #5]
 80003ce:	2b04      	cmp	r3, #4
 80003d0:	d117      	bne.n	8000402 <GPIO_Init+0x8e>
		{
			// configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d2:	4b40      	ldr	r3, [pc, #256]	; (80004d4 <GPIO_Init+0x160>)
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	7912      	ldrb	r2, [r2, #4]
 80003da:	4611      	mov	r1, r2
 80003dc:	2201      	movs	r2, #1
 80003de:	408a      	lsls	r2, r1
 80003e0:	4611      	mov	r1, r2
 80003e2:	4a3c      	ldr	r2, [pc, #240]	; (80004d4 <GPIO_Init+0x160>)
 80003e4:	430b      	orrs	r3, r1
 80003e6:	60d3      	str	r3, [r2, #12]

			// good practice: clear corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003e8:	4b3a      	ldr	r3, [pc, #232]	; (80004d4 <GPIO_Init+0x160>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	7912      	ldrb	r2, [r2, #4]
 80003f0:	4611      	mov	r1, r2
 80003f2:	2201      	movs	r2, #1
 80003f4:	408a      	lsls	r2, r1
 80003f6:	43d2      	mvns	r2, r2
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a36      	ldr	r2, [pc, #216]	; (80004d4 <GPIO_Init+0x160>)
 80003fc:	400b      	ands	r3, r1
 80003fe:	6093      	str	r3, [r2, #8]
 8000400:	e035      	b.n	800046e <GPIO_Init+0xfa>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	795b      	ldrb	r3, [r3, #5]
 8000406:	2b05      	cmp	r3, #5
 8000408:	d117      	bne.n	800043a <GPIO_Init+0xc6>
			// configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800040a:	4b32      	ldr	r3, [pc, #200]	; (80004d4 <GPIO_Init+0x160>)
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	7912      	ldrb	r2, [r2, #4]
 8000412:	4611      	mov	r1, r2
 8000414:	2201      	movs	r2, #1
 8000416:	408a      	lsls	r2, r1
 8000418:	4611      	mov	r1, r2
 800041a:	4a2e      	ldr	r2, [pc, #184]	; (80004d4 <GPIO_Init+0x160>)
 800041c:	430b      	orrs	r3, r1
 800041e:	6093      	str	r3, [r2, #8]

			// good practice: clear corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000420:	4b2c      	ldr	r3, [pc, #176]	; (80004d4 <GPIO_Init+0x160>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	7912      	ldrb	r2, [r2, #4]
 8000428:	4611      	mov	r1, r2
 800042a:	2201      	movs	r2, #1
 800042c:	408a      	lsls	r2, r1
 800042e:	43d2      	mvns	r2, r2
 8000430:	4611      	mov	r1, r2
 8000432:	4a28      	ldr	r2, [pc, #160]	; (80004d4 <GPIO_Init+0x160>)
 8000434:	400b      	ands	r3, r1
 8000436:	60d3      	str	r3, [r2, #12]
 8000438:	e019      	b.n	800046e <GPIO_Init+0xfa>


		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	795b      	ldrb	r3, [r3, #5]
 800043e:	2b05      	cmp	r3, #5
 8000440:	d115      	bne.n	800046e <GPIO_Init+0xfa>
		{
			// configure both (FTSR and RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000442:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <GPIO_Init+0x160>)
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	7912      	ldrb	r2, [r2, #4]
 800044a:	4611      	mov	r1, r2
 800044c:	2201      	movs	r2, #1
 800044e:	408a      	lsls	r2, r1
 8000450:	4611      	mov	r1, r2
 8000452:	4a20      	ldr	r2, [pc, #128]	; (80004d4 <GPIO_Init+0x160>)
 8000454:	430b      	orrs	r3, r1
 8000456:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <GPIO_Init+0x160>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	7912      	ldrb	r2, [r2, #4]
 8000460:	4611      	mov	r1, r2
 8000462:	2201      	movs	r2, #1
 8000464:	408a      	lsls	r2, r1
 8000466:	4611      	mov	r1, r2
 8000468:	4a1a      	ldr	r2, [pc, #104]	; (80004d4 <GPIO_Init+0x160>)
 800046a:	430b      	orrs	r3, r1
 800046c:	60d3      	str	r3, [r2, #12]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	791b      	ldrb	r3, [r3, #4]
 8000472:	089b      	lsrs	r3, r3, #2
 8000474:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	f003 0303 	and.w	r3, r3, #3
 800047e:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <GPIO_Init+0x164>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d032      	beq.n	80004f0 <GPIO_Init+0x17c>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a13      	ldr	r2, [pc, #76]	; (80004dc <GPIO_Init+0x168>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d01d      	beq.n	80004d0 <GPIO_Init+0x15c>
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a11      	ldr	r2, [pc, #68]	; (80004e0 <GPIO_Init+0x16c>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d016      	beq.n	80004cc <GPIO_Init+0x158>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a10      	ldr	r2, [pc, #64]	; (80004e4 <GPIO_Init+0x170>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d00f      	beq.n	80004c8 <GPIO_Init+0x154>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <GPIO_Init+0x174>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d008      	beq.n	80004c4 <GPIO_Init+0x150>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <GPIO_Init+0x178>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d101      	bne.n	80004c0 <GPIO_Init+0x14c>
 80004bc:	2307      	movs	r3, #7
 80004be:	e018      	b.n	80004f2 <GPIO_Init+0x17e>
 80004c0:	2300      	movs	r3, #0
 80004c2:	e016      	b.n	80004f2 <GPIO_Init+0x17e>
 80004c4:	2304      	movs	r3, #4
 80004c6:	e014      	b.n	80004f2 <GPIO_Init+0x17e>
 80004c8:	2303      	movs	r3, #3
 80004ca:	e012      	b.n	80004f2 <GPIO_Init+0x17e>
 80004cc:	2302      	movs	r3, #2
 80004ce:	e010      	b.n	80004f2 <GPIO_Init+0x17e>
 80004d0:	2301      	movs	r3, #1
 80004d2:	e00e      	b.n	80004f2 <GPIO_Init+0x17e>
 80004d4:	40013c00 	.word	0x40013c00
 80004d8:	40020000 	.word	0x40020000
 80004dc:	40020400 	.word	0x40020400
 80004e0:	40020800 	.word	0x40020800
 80004e4:	40020c00 	.word	0x40020c00
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40021c00 	.word	0x40021c00
 80004f0:	2300      	movs	r3, #0
 80004f2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80004f4:	4b5e      	ldr	r3, [pc, #376]	; (8000670 <GPIO_Init+0x2fc>)
 80004f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004f8:	4a5d      	ldr	r2, [pc, #372]	; (8000670 <GPIO_Init+0x2fc>)
 80004fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004fe:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = (portcode << (temp2*4));
 8000500:	7c7a      	ldrb	r2, [r7, #17]
 8000502:	7cbb      	ldrb	r3, [r7, #18]
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	fa02 f103 	lsl.w	r1, r2, r3
 800050a:	4a5a      	ldr	r2, [pc, #360]	; (8000674 <GPIO_Init+0x300>)
 800050c:	7cfb      	ldrb	r3, [r7, #19]
 800050e:	3302      	adds	r3, #2
 8000510:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000514:	4b58      	ldr	r3, [pc, #352]	; (8000678 <GPIO_Init+0x304>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	7912      	ldrb	r2, [r2, #4]
 800051c:	4611      	mov	r1, r2
 800051e:	2201      	movs	r2, #1
 8000520:	408a      	lsls	r2, r1
 8000522:	4611      	mov	r1, r2
 8000524:	4a54      	ldr	r2, [pc, #336]	; (8000678 <GPIO_Init+0x304>)
 8000526:	430b      	orrs	r3, r1
 8000528:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]

	// 2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	461a      	mov	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	689a      	ldr	r2, [r3, #8]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	2103      	movs	r1, #3
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	43db      	mvns	r3, r3
 8000554:	4619      	mov	r1, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	400a      	ands	r2, r1
 800055c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	6899      	ldr	r1, [r3, #8]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	430a      	orrs	r2, r1
 800056c:	609a      	str	r2, [r3, #8]
	temp = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]


	// 3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	79db      	ldrb	r3, [r3, #7]
 8000576:	461a      	mov	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	791b      	ldrb	r3, [r3, #4]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	68da      	ldr	r2, [r3, #12]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	791b      	ldrb	r3, [r3, #4]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	2103      	movs	r1, #3
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	43db      	mvns	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	400a      	ands	r2, r1
 80005a0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	68d9      	ldr	r1, [r3, #12]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	430a      	orrs	r2, r1
 80005b0:	60da      	str	r2, [r3, #12]
	temp = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]


	// 4. configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	7a1b      	ldrb	r3, [r3, #8]
 80005ba:	461a      	mov	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	4619      	mov	r1, r3
 80005d2:	2301      	movs	r3, #1
 80005d4:	408b      	lsls	r3, r1
 80005d6:	43db      	mvns	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	400a      	ands	r2, r1
 80005e0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	6859      	ldr	r1, [r3, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	430a      	orrs	r2, r1
 80005f0:	605a      	str	r2, [r3, #4]
	temp = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]


	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	795b      	ldrb	r3, [r3, #5]
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d132      	bne.n	8000664 <GPIO_Init+0x2f0>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	08db      	lsrs	r3, r3, #3
 8000604:	b2db      	uxtb	r3, r3
 8000606:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	f003 0307 	and.w	r3, r3, #7
 8000610:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4*temp2));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	3208      	adds	r2, #8
 800061a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	210f      	movs	r1, #15
 8000624:	fa01 f303 	lsl.w	r3, r1, r3
 8000628:	43db      	mvns	r3, r3
 800062a:	4619      	mov	r1, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4011      	ands	r1, r2
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	3208      	adds	r2, #8
 8000636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	3208      	adds	r2, #8
 8000642:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7a5b      	ldrb	r3, [r3, #9]
 800064a:	4619      	mov	r1, r3
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	fa01 f303 	lsl.w	r3, r1, r3
 8000654:	4619      	mov	r1, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4311      	orrs	r1, r2
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	3208      	adds	r2, #8
 8000660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000664:	bf00      	nop
 8000666:	371c      	adds	r7, #28
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	40023800 	.word	0x40023800
 8000674:	40013800 	.word	0x40013800
 8000678:	40013c00 	.word	0x40013c00

0800067c <GPIO_ToggleOutputPin>:
 * @Note			- none
 *
 */

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	78fa      	ldrb	r2, [r7, #3]
 800068e:	2101      	movs	r1, #1
 8000690:	fa01 f202 	lsl.w	r2, r1, r2
 8000694:	405a      	eors	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	615a      	str	r2, [r3, #20]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <__libc_init_array>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	4d0d      	ldr	r5, [pc, #52]	; (80006e0 <__libc_init_array+0x38>)
 80006ac:	4c0d      	ldr	r4, [pc, #52]	; (80006e4 <__libc_init_array+0x3c>)
 80006ae:	1b64      	subs	r4, r4, r5
 80006b0:	10a4      	asrs	r4, r4, #2
 80006b2:	2600      	movs	r6, #0
 80006b4:	42a6      	cmp	r6, r4
 80006b6:	d109      	bne.n	80006cc <__libc_init_array+0x24>
 80006b8:	4d0b      	ldr	r5, [pc, #44]	; (80006e8 <__libc_init_array+0x40>)
 80006ba:	4c0c      	ldr	r4, [pc, #48]	; (80006ec <__libc_init_array+0x44>)
 80006bc:	f000 f818 	bl	80006f0 <_init>
 80006c0:	1b64      	subs	r4, r4, r5
 80006c2:	10a4      	asrs	r4, r4, #2
 80006c4:	2600      	movs	r6, #0
 80006c6:	42a6      	cmp	r6, r4
 80006c8:	d105      	bne.n	80006d6 <__libc_init_array+0x2e>
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d0:	4798      	blx	r3
 80006d2:	3601      	adds	r6, #1
 80006d4:	e7ee      	b.n	80006b4 <__libc_init_array+0xc>
 80006d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006da:	4798      	blx	r3
 80006dc:	3601      	adds	r6, #1
 80006de:	e7f2      	b.n	80006c6 <__libc_init_array+0x1e>
 80006e0:	08000708 	.word	0x08000708
 80006e4:	08000708 	.word	0x08000708
 80006e8:	08000708 	.word	0x08000708
 80006ec:	0800070c 	.word	0x0800070c

080006f0 <_init>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	bf00      	nop
 80006f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f6:	bc08      	pop	{r3}
 80006f8:	469e      	mov	lr, r3
 80006fa:	4770      	bx	lr

080006fc <_fini>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	bf00      	nop
 8000700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000702:	bc08      	pop	{r3}
 8000704:	469e      	mov	lr, r3
 8000706:	4770      	bx	lr
