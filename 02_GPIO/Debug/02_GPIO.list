
02_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000828  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009bc  080009c4  000109c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009bc  080009bc  000109c4  2**0
                  CONTENTS
  4 .ARM          00000000  080009bc  080009bc  000109c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009bc  080009c4  000109c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009bc  080009bc  000109bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009c0  080009c0  000109c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080009c4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080009c4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000109c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000109f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a59  00000000  00000000  00010a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002da  00000000  00000000  00011490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  00011770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000092  00000000  00000000  00011840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001e90  00000000  00000000  000118d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ea6  00000000  00000000  00013762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008607  00000000  00000000  00014608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000002b0  00000000  00000000  0001cc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0001cec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080009a4 	.word	0x080009a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080009a4 	.word	0x080009a4

080001d4 <delay>:
#include <string.h>
#include "stm32f401xx.h"


void delay(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 5000000; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	004c4b3f 	.word	0x004c4b3f

08000200 <debounce>:

void debounce(void)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	e002      	b.n	8000212 <debounce+0x12>
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	3301      	adds	r3, #1
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4a04      	ldr	r2, [pc, #16]	; (8000228 <debounce+0x28>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d9f8      	bls.n	800020c <debounce+0xc>
}
 800021a:	bf00      	nop
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	0007a11f 	.word	0x0007a11f

0800022c <main>:

int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b08a      	sub	sp, #40	; 0x28
 8000230:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed1, GpioLed2, GpioButton;

	memset(&GpioLed1, 0, sizeof(GpioLed1)); // set each member element to 0
 8000232:	f107 031c 	add.w	r3, r7, #28
 8000236:	220c      	movs	r2, #12
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f000 fb86 	bl	800094c <memset>
	memset(&GpioLed2, 0, sizeof(GpioLed2));
 8000240:	f107 0310 	add.w	r3, r7, #16
 8000244:	220c      	movs	r2, #12
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fb7f 	bl	800094c <memset>
	memset(&GpioButton, 0, sizeof(GpioButton));
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	220c      	movs	r2, #12
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fb79 	bl	800094c <memset>


	GpioLed1.pGPIOx = GPIOC;
 800025a:	4b27      	ldr	r3, [pc, #156]	; (80002f8 <main+0xcc>)
 800025c:	61fb      	str	r3, [r7, #28]
	GpioLed1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 800025e:	230b      	movs	r3, #11
 8000260:	f887 3020 	strb.w	r3, [r7, #32]
	GpioLed1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000264:	2301      	movs	r3, #1
 8000266:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	GpioLed1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 800026a:	2300      	movs	r3, #0
 800026c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	GpioLed1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000270:	2300      	movs	r3, #0
 8000272:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GpioLed1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000276:	2300      	movs	r3, #0
 8000278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	GpioLed2.pGPIOx = GPIOC;
 800027c:	4b1e      	ldr	r3, [pc, #120]	; (80002f8 <main+0xcc>)
 800027e:	613b      	str	r3, [r7, #16]
	GpioLed2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000280:	230c      	movs	r3, #12
 8000282:	753b      	strb	r3, [r7, #20]
	GpioLed2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000284:	2301      	movs	r3, #1
 8000286:	757b      	strb	r3, [r7, #21]
	GpioLed2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000288:	2300      	movs	r3, #0
 800028a:	75bb      	strb	r3, [r7, #22]
	GpioLed2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800028c:	2300      	movs	r3, #0
 800028e:	763b      	strb	r3, [r7, #24]
	GpioLed2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000290:	2300      	movs	r3, #0
 8000292:	75fb      	strb	r3, [r7, #23]


	GpioButton.pGPIOx = GPIOC;
 8000294:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <main+0xcc>)
 8000296:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8000298:	230a      	movs	r3, #10
 800029a:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800029c:	2304      	movs	r3, #4
 800029e:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002a0:	2302      	movs	r3, #2
 80002a2:	72bb      	strb	r3, [r7, #10]
	GpioButton.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002a4:	2300      	movs	r3, #0
 80002a6:	733b      	strb	r3, [r7, #12]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002a8:	2301      	movs	r3, #1
 80002aa:	72fb      	strb	r3, [r7, #11]




	GPIO_PeriClockControl(GPIOC, ENABLE);
 80002ac:	2101      	movs	r1, #1
 80002ae:	4812      	ldr	r0, [pc, #72]	; (80002f8 <main+0xcc>)
 80002b0:	f000 f85e 	bl	8000370 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed1);
 80002b4:	f107 031c 	add.w	r3, r7, #28
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f8b7 	bl	800042c <GPIO_Init>
	GPIO_Init(&GpioLed2);
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 f8b2 	bl	800042c <GPIO_Init>
	GPIO_Init(&GpioButton);
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f8ae 	bl	800042c <GPIO_Init>
	GPIO_WriteToOutputPin(GPIOC,GPIO_PIN_NO_11,GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	210b      	movs	r1, #11
 80002d4:	4808      	ldr	r0, [pc, #32]	; (80002f8 <main+0xcc>)
 80002d6:	f000 fa2d 	bl	8000734 <GPIO_WriteToOutputPin>

	// IRQ config
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI15);
 80002da:	210f      	movs	r1, #15
 80002dc:	2028      	movs	r0, #40	; 0x28
 80002de:	f000 fae7 	bl	80008b0 <GPIO_IRQPriorityConfig>
	GPIO_IRQITConfig(IRQ_NO_EXTI15_10, ENABLE);
 80002e2:	2101      	movs	r1, #1
 80002e4:	2028      	movs	r0, #40	; 0x28
 80002e6:	f000 fa5f 	bl	80007a8 <GPIO_IRQITConfig>

	while(1)
	{
		GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_12);
 80002ea:	210c      	movs	r1, #12
 80002ec:	4802      	ldr	r0, [pc, #8]	; (80002f8 <main+0xcc>)
 80002ee:	f000 fa46 	bl	800077e <GPIO_ToggleOutputPin>
		delay();
 80002f2:	f7ff ff6f 	bl	80001d4 <delay>
		GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_12);
 80002f6:	e7f8      	b.n	80002ea <main+0xbe>
 80002f8:	40020800 	.word	0x40020800

080002fc <EXTI15_10_IRQHandler>:
	}
}

void EXTI15_10_IRQHandler(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	debounce(); // before clear trigger
 8000300:	f7ff ff7e 	bl	8000200 <debounce>
	GPIO_IRQHandling(GPIO_PIN_NO_10);
 8000304:	200a      	movs	r0, #10
 8000306:	f000 fb01 	bl	800090c <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_11);
 800030a:	210b      	movs	r1, #11
 800030c:	4802      	ldr	r0, [pc, #8]	; (8000318 <EXTI15_10_IRQHandler+0x1c>)
 800030e:	f000 fa36 	bl	800077e <GPIO_ToggleOutputPin>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40020800 	.word	0x40020800

0800031c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000320:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000324:	480c      	ldr	r0, [pc, #48]	; (8000358 <LoopForever+0x6>)
  ldr r1, =_edata
 8000326:	490d      	ldr	r1, [pc, #52]	; (800035c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000328:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <LoopForever+0xe>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800032c:	e002      	b.n	8000334 <LoopCopyDataInit>

0800032e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000332:	3304      	adds	r3, #4

08000334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000338:	d3f9      	bcc.n	800032e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033a:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800033c:	4c0a      	ldr	r4, [pc, #40]	; (8000368 <LoopForever+0x16>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000340:	e001      	b.n	8000346 <LoopFillZerobss>

08000342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000344:	3204      	adds	r2, #4

08000346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000348:	d3fb      	bcc.n	8000342 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034a:	f000 fb07 	bl	800095c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034e:	f7ff ff6d 	bl	800022c <main>

08000352 <LoopForever>:

LoopForever:
  b LoopForever
 8000352:	e7fe      	b.n	8000352 <LoopForever>
  ldr   r0, =_estack
 8000354:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800035c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000360:	080009c4 	.word	0x080009c4
  ldr r2, =_sbss
 8000364:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000368:	2000001c 	.word	0x2000001c

0800036c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800036c:	e7fe      	b.n	800036c <ADC_IRQHandler>
	...

08000370 <GPIO_PeriClockControl>:
 *
 */


void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800037c:	78fb      	ldrb	r3, [r7, #3]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d140      	bne.n	8000404 <GPIO_PeriClockControl+0x94>
	{
		if		(pGPIOx == GPIOA) GPIOA_PCLK_EN();
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a22      	ldr	r2, [pc, #136]	; (8000410 <GPIO_PeriClockControl+0xa0>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d106      	bne.n	8000398 <GPIO_PeriClockControl+0x28>
 800038a:	4b22      	ldr	r3, [pc, #136]	; (8000414 <GPIO_PeriClockControl+0xa4>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a21      	ldr	r2, [pc, #132]	; (8000414 <GPIO_PeriClockControl+0xa4>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
		else if	(pGPIOx == GPIOH) GPIOH_PCLK_EN();
	}else
	{
		// TODO
	}
}
 8000396:	e035      	b.n	8000404 <GPIO_PeriClockControl+0x94>
		else if	(pGPIOx == GPIOB) GPIOB_PCLK_EN();
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a1f      	ldr	r2, [pc, #124]	; (8000418 <GPIO_PeriClockControl+0xa8>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d106      	bne.n	80003ae <GPIO_PeriClockControl+0x3e>
 80003a0:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <GPIO_PeriClockControl+0xa4>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a4:	4a1b      	ldr	r2, [pc, #108]	; (8000414 <GPIO_PeriClockControl+0xa4>)
 80003a6:	f043 0302 	orr.w	r3, r3, #2
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ac:	e02a      	b.n	8000404 <GPIO_PeriClockControl+0x94>
		else if	(pGPIOx == GPIOC) GPIOC_PCLK_EN();
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a1a      	ldr	r2, [pc, #104]	; (800041c <GPIO_PeriClockControl+0xac>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PeriClockControl+0x54>
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <GPIO_PeriClockControl+0xa4>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	4a16      	ldr	r2, [pc, #88]	; (8000414 <GPIO_PeriClockControl+0xa4>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c2:	e01f      	b.n	8000404 <GPIO_PeriClockControl+0x94>
		else if	(pGPIOx == GPIOD) GPIOD_PCLK_EN();
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a16      	ldr	r2, [pc, #88]	; (8000420 <GPIO_PeriClockControl+0xb0>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_PeriClockControl+0x6a>
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <GPIO_PeriClockControl+0xa4>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a10      	ldr	r2, [pc, #64]	; (8000414 <GPIO_PeriClockControl+0xa4>)
 80003d2:	f043 0308 	orr.w	r3, r3, #8
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d8:	e014      	b.n	8000404 <GPIO_PeriClockControl+0x94>
		else if	(pGPIOx == GPIOE) GPIOE_PCLK_EN();
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a11      	ldr	r2, [pc, #68]	; (8000424 <GPIO_PeriClockControl+0xb4>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_PeriClockControl+0x80>
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <GPIO_PeriClockControl+0xa4>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a0b      	ldr	r2, [pc, #44]	; (8000414 <GPIO_PeriClockControl+0xa4>)
 80003e8:	f043 0310 	orr.w	r3, r3, #16
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ee:	e009      	b.n	8000404 <GPIO_PeriClockControl+0x94>
		else if	(pGPIOx == GPIOH) GPIOH_PCLK_EN();
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a0d      	ldr	r2, [pc, #52]	; (8000428 <GPIO_PeriClockControl+0xb8>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d105      	bne.n	8000404 <GPIO_PeriClockControl+0x94>
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <GPIO_PeriClockControl+0xa4>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a05      	ldr	r2, [pc, #20]	; (8000414 <GPIO_PeriClockControl+0xa4>)
 80003fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40020000 	.word	0x40020000
 8000414:	40023800 	.word	0x40023800
 8000418:	40020400 	.word	0x40020400
 800041c:	40020800 	.word	0x40020800
 8000420:	40020c00 	.word	0x40020c00
 8000424:	40021000 	.word	0x40021000
 8000428:	40021c00 	.word	0x40021c00

0800042c <GPIO_Init>:
 *
 * @Note			- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800042c:	b480      	push	{r7}
 800042e:	b087      	sub	sp, #28
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporary register
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]

	// 1. configure the mode of the gpio pin
	
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	795b      	ldrb	r3, [r3, #5]
 800043c:	2b03      	cmp	r3, #3
 800043e:	d820      	bhi.n	8000482 <GPIO_Init+0x56>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	795b      	ldrb	r3, [r3, #5]
 8000444:	461a      	mov	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	791b      	ldrb	r3, [r3, #4]
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	2103      	movs	r1, #3
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	43db      	mvns	r3, r3
 8000466:	4619      	mov	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	400a      	ands	r2, r1
 800046e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	6819      	ldr	r1, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	697a      	ldr	r2, [r7, #20]
 800047c:	430a      	orrs	r2, r1
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	e0af      	b.n	80005e2 <GPIO_Init+0x1b6>
	}else
	{
		//1. configure interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	795b      	ldrb	r3, [r3, #5]
 8000486:	2b04      	cmp	r3, #4
 8000488:	d117      	bne.n	80004ba <GPIO_Init+0x8e>
		{
			// configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800048a:	4b40      	ldr	r3, [pc, #256]	; (800058c <GPIO_Init+0x160>)
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	7912      	ldrb	r2, [r2, #4]
 8000492:	4611      	mov	r1, r2
 8000494:	2201      	movs	r2, #1
 8000496:	408a      	lsls	r2, r1
 8000498:	4611      	mov	r1, r2
 800049a:	4a3c      	ldr	r2, [pc, #240]	; (800058c <GPIO_Init+0x160>)
 800049c:	430b      	orrs	r3, r1
 800049e:	60d3      	str	r3, [r2, #12]

			// good practice: clear corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a0:	4b3a      	ldr	r3, [pc, #232]	; (800058c <GPIO_Init+0x160>)
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	7912      	ldrb	r2, [r2, #4]
 80004a8:	4611      	mov	r1, r2
 80004aa:	2201      	movs	r2, #1
 80004ac:	408a      	lsls	r2, r1
 80004ae:	43d2      	mvns	r2, r2
 80004b0:	4611      	mov	r1, r2
 80004b2:	4a36      	ldr	r2, [pc, #216]	; (800058c <GPIO_Init+0x160>)
 80004b4:	400b      	ands	r3, r1
 80004b6:	6093      	str	r3, [r2, #8]
 80004b8:	e035      	b.n	8000526 <GPIO_Init+0xfa>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	795b      	ldrb	r3, [r3, #5]
 80004be:	2b05      	cmp	r3, #5
 80004c0:	d117      	bne.n	80004f2 <GPIO_Init+0xc6>
			// configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c2:	4b32      	ldr	r3, [pc, #200]	; (800058c <GPIO_Init+0x160>)
 80004c4:	689b      	ldr	r3, [r3, #8]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	7912      	ldrb	r2, [r2, #4]
 80004ca:	4611      	mov	r1, r2
 80004cc:	2201      	movs	r2, #1
 80004ce:	408a      	lsls	r2, r1
 80004d0:	4611      	mov	r1, r2
 80004d2:	4a2e      	ldr	r2, [pc, #184]	; (800058c <GPIO_Init+0x160>)
 80004d4:	430b      	orrs	r3, r1
 80004d6:	6093      	str	r3, [r2, #8]

			// good practice: clear corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d8:	4b2c      	ldr	r3, [pc, #176]	; (800058c <GPIO_Init+0x160>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	7912      	ldrb	r2, [r2, #4]
 80004e0:	4611      	mov	r1, r2
 80004e2:	2201      	movs	r2, #1
 80004e4:	408a      	lsls	r2, r1
 80004e6:	43d2      	mvns	r2, r2
 80004e8:	4611      	mov	r1, r2
 80004ea:	4a28      	ldr	r2, [pc, #160]	; (800058c <GPIO_Init+0x160>)
 80004ec:	400b      	ands	r3, r1
 80004ee:	60d3      	str	r3, [r2, #12]
 80004f0:	e019      	b.n	8000526 <GPIO_Init+0xfa>


		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	795b      	ldrb	r3, [r3, #5]
 80004f6:	2b05      	cmp	r3, #5
 80004f8:	d115      	bne.n	8000526 <GPIO_Init+0xfa>
		{
			// configure both (FTSR and RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004fa:	4b24      	ldr	r3, [pc, #144]	; (800058c <GPIO_Init+0x160>)
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	7912      	ldrb	r2, [r2, #4]
 8000502:	4611      	mov	r1, r2
 8000504:	2201      	movs	r2, #1
 8000506:	408a      	lsls	r2, r1
 8000508:	4611      	mov	r1, r2
 800050a:	4a20      	ldr	r2, [pc, #128]	; (800058c <GPIO_Init+0x160>)
 800050c:	430b      	orrs	r3, r1
 800050e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000510:	4b1e      	ldr	r3, [pc, #120]	; (800058c <GPIO_Init+0x160>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	7912      	ldrb	r2, [r2, #4]
 8000518:	4611      	mov	r1, r2
 800051a:	2201      	movs	r2, #1
 800051c:	408a      	lsls	r2, r1
 800051e:	4611      	mov	r1, r2
 8000520:	4a1a      	ldr	r2, [pc, #104]	; (800058c <GPIO_Init+0x160>)
 8000522:	430b      	orrs	r3, r1
 8000524:	60d3      	str	r3, [r2, #12]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	791b      	ldrb	r3, [r3, #4]
 800052a:	089b      	lsrs	r3, r3, #2
 800052c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	f003 0303 	and.w	r3, r3, #3
 8000536:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <GPIO_Init+0x164>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d032      	beq.n	80005a8 <GPIO_Init+0x17c>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a13      	ldr	r2, [pc, #76]	; (8000594 <GPIO_Init+0x168>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d01d      	beq.n	8000588 <GPIO_Init+0x15c>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a11      	ldr	r2, [pc, #68]	; (8000598 <GPIO_Init+0x16c>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d016      	beq.n	8000584 <GPIO_Init+0x158>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a10      	ldr	r2, [pc, #64]	; (800059c <GPIO_Init+0x170>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d00f      	beq.n	8000580 <GPIO_Init+0x154>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <GPIO_Init+0x174>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d008      	beq.n	800057c <GPIO_Init+0x150>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <GPIO_Init+0x178>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d101      	bne.n	8000578 <GPIO_Init+0x14c>
 8000574:	2307      	movs	r3, #7
 8000576:	e018      	b.n	80005aa <GPIO_Init+0x17e>
 8000578:	2300      	movs	r3, #0
 800057a:	e016      	b.n	80005aa <GPIO_Init+0x17e>
 800057c:	2304      	movs	r3, #4
 800057e:	e014      	b.n	80005aa <GPIO_Init+0x17e>
 8000580:	2303      	movs	r3, #3
 8000582:	e012      	b.n	80005aa <GPIO_Init+0x17e>
 8000584:	2302      	movs	r3, #2
 8000586:	e010      	b.n	80005aa <GPIO_Init+0x17e>
 8000588:	2301      	movs	r3, #1
 800058a:	e00e      	b.n	80005aa <GPIO_Init+0x17e>
 800058c:	40013c00 	.word	0x40013c00
 8000590:	40020000 	.word	0x40020000
 8000594:	40020400 	.word	0x40020400
 8000598:	40020800 	.word	0x40020800
 800059c:	40020c00 	.word	0x40020c00
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40021c00 	.word	0x40021c00
 80005a8:	2300      	movs	r3, #0
 80005aa:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005ac:	4b5e      	ldr	r3, [pc, #376]	; (8000728 <GPIO_Init+0x2fc>)
 80005ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b0:	4a5d      	ldr	r2, [pc, #372]	; (8000728 <GPIO_Init+0x2fc>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = (portcode << (temp2*4));
 80005b8:	7c7a      	ldrb	r2, [r7, #17]
 80005ba:	7cbb      	ldrb	r3, [r7, #18]
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	fa02 f103 	lsl.w	r1, r2, r3
 80005c2:	4a5a      	ldr	r2, [pc, #360]	; (800072c <GPIO_Init+0x300>)
 80005c4:	7cfb      	ldrb	r3, [r7, #19]
 80005c6:	3302      	adds	r3, #2
 80005c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005cc:	4b58      	ldr	r3, [pc, #352]	; (8000730 <GPIO_Init+0x304>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	7912      	ldrb	r2, [r2, #4]
 80005d4:	4611      	mov	r1, r2
 80005d6:	2201      	movs	r2, #1
 80005d8:	408a      	lsls	r2, r1
 80005da:	4611      	mov	r1, r2
 80005dc:	4a54      	ldr	r2, [pc, #336]	; (8000730 <GPIO_Init+0x304>)
 80005de:	430b      	orrs	r3, r1
 80005e0:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]

	// 2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	799b      	ldrb	r3, [r3, #6]
 80005ea:	461a      	mov	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	2103      	movs	r1, #3
 8000606:	fa01 f303 	lsl.w	r3, r1, r3
 800060a:	43db      	mvns	r3, r3
 800060c:	4619      	mov	r1, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	400a      	ands	r2, r1
 8000614:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	6899      	ldr	r1, [r3, #8]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	430a      	orrs	r2, r1
 8000624:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]


	// 3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	79db      	ldrb	r3, [r3, #7]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	68da      	ldr	r2, [r3, #12]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	2103      	movs	r1, #3
 800064a:	fa01 f303 	lsl.w	r3, r1, r3
 800064e:	43db      	mvns	r3, r3
 8000650:	4619      	mov	r1, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	400a      	ands	r2, r1
 8000658:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	68d9      	ldr	r1, [r3, #12]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	430a      	orrs	r2, r1
 8000668:	60da      	str	r2, [r3, #12]
	temp = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]


	// 4. configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	7a1b      	ldrb	r3, [r3, #8]
 8000672:	461a      	mov	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	4619      	mov	r1, r3
 800068a:	2301      	movs	r3, #1
 800068c:	408b      	lsls	r3, r1
 800068e:	43db      	mvns	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	400a      	ands	r2, r1
 8000698:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6859      	ldr	r1, [r3, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	605a      	str	r2, [r3, #4]
	temp = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]


	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	795b      	ldrb	r3, [r3, #5]
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d132      	bne.n	800071c <GPIO_Init+0x2f0>
	{
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	08db      	lsrs	r3, r3, #3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	f003 0307 	and.w	r3, r3, #7
 80006c8:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4*temp2));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	3208      	adds	r2, #8
 80006d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	210f      	movs	r1, #15
 80006dc:	fa01 f303 	lsl.w	r3, r1, r3
 80006e0:	43db      	mvns	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4011      	ands	r1, r2
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	3208      	adds	r2, #8
 80006ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	3208      	adds	r2, #8
 80006fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	7a5b      	ldrb	r3, [r3, #9]
 8000702:	4619      	mov	r1, r3
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	4619      	mov	r1, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4311      	orrs	r1, r2
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	3208      	adds	r2, #8
 8000718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800071c:	bf00      	nop
 800071e:	371c      	adds	r7, #28
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	40023800 	.word	0x40023800
 800072c:	40013800 	.word	0x40013800
 8000730:	40013c00 	.word	0x40013c00

08000734 <GPIO_WriteToOutputPin>:
 * @Note			- none
 *
 */

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
 8000740:	4613      	mov	r3, r2
 8000742:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8000744:	78bb      	ldrb	r3, [r7, #2]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d109      	bne.n	800075e <GPIO_WriteToOutputPin+0x2a>
	{
		// write 1 to the output data register at the bitfield corresponding to the pin number
		pGPIOx->ODR |= (1 << PinNumber);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	78fa      	ldrb	r2, [r7, #3]
 8000750:	2101      	movs	r1, #1
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	431a      	orrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	615a      	str	r2, [r3, #20]
	}else
	{
		// write 0
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 800075c:	e009      	b.n	8000772 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	78fa      	ldrb	r2, [r7, #3]
 8000764:	2101      	movs	r1, #1
 8000766:	fa01 f202 	lsl.w	r2, r1, r2
 800076a:	43d2      	mvns	r2, r2
 800076c:	401a      	ands	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	615a      	str	r2, [r3, #20]
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <GPIO_ToggleOutputPin>:
 * @Note			- none
 *
 */

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	78fa      	ldrb	r2, [r7, #3]
 8000790:	2101      	movs	r1, #1
 8000792:	fa01 f202 	lsl.w	r2, r1, r2
 8000796:	405a      	eors	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	615a      	str	r2, [r3, #20]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <GPIO_IRQITConfig>:
 *
 */


void GPIO_IRQITConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	460a      	mov	r2, r1
 80007b2:	71fb      	strb	r3, [r7, #7]
 80007b4:	4613      	mov	r3, r2
 80007b6:	71bb      	strb	r3, [r7, #6]
	// reference: CORTEX M4 user guide
	if(EnorDi == ENABLE)
 80007b8:	79bb      	ldrb	r3, [r7, #6]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d133      	bne.n	8000826 <GPIO_IRQITConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b1f      	cmp	r3, #31
 80007c2:	d80a      	bhi.n	80007da <GPIO_IRQITConfig+0x32>
		{
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 80007c4:	4b35      	ldr	r3, [pc, #212]	; (800089c <GPIO_IRQITConfig+0xf4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	79fa      	ldrb	r2, [r7, #7]
 80007ca:	2101      	movs	r1, #1
 80007cc:	fa01 f202 	lsl.w	r2, r1, r2
 80007d0:	4611      	mov	r1, r2
 80007d2:	4a32      	ldr	r2, [pc, #200]	; (800089c <GPIO_IRQITConfig+0xf4>)
 80007d4:	430b      	orrs	r3, r1
 80007d6:	6013      	str	r3, [r2, #0]
		{
			// program ICER2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 80007d8:	e059      	b.n	800088e <GPIO_IRQITConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64) // 32 to 63
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b1f      	cmp	r3, #31
 80007de:	d90f      	bls.n	8000800 <GPIO_IRQITConfig+0x58>
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b3f      	cmp	r3, #63	; 0x3f
 80007e4:	d80c      	bhi.n	8000800 <GPIO_IRQITConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <GPIO_IRQITConfig+0xf8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	f002 021f 	and.w	r2, r2, #31
 80007f0:	2101      	movs	r1, #1
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
 80007f6:	4611      	mov	r1, r2
 80007f8:	4a29      	ldr	r2, [pc, #164]	; (80008a0 <GPIO_IRQITConfig+0xf8>)
 80007fa:	430b      	orrs	r3, r1
 80007fc:	6013      	str	r3, [r2, #0]
 80007fe:	e046      	b.n	800088e <GPIO_IRQITConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96) // 64 to 95
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b3f      	cmp	r3, #63	; 0x3f
 8000804:	d943      	bls.n	800088e <GPIO_IRQITConfig+0xe6>
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b5f      	cmp	r3, #95	; 0x5f
 800080a:	d840      	bhi.n	800088e <GPIO_IRQITConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 800080c:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <GPIO_IRQITConfig+0xfc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	79fa      	ldrb	r2, [r7, #7]
 8000812:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000816:	2101      	movs	r1, #1
 8000818:	fa01 f202 	lsl.w	r2, r1, r2
 800081c:	4611      	mov	r1, r2
 800081e:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <GPIO_IRQITConfig+0xfc>)
 8000820:	430b      	orrs	r3, r1
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	e033      	b.n	800088e <GPIO_IRQITConfig+0xe6>
		if(IRQNumber <= 31)
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b1f      	cmp	r3, #31
 800082a:	d80a      	bhi.n	8000842 <GPIO_IRQITConfig+0x9a>
			*NVIC_ISER0 |= (1 << IRQNumber);
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <GPIO_IRQITConfig+0xf4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	2101      	movs	r1, #1
 8000834:	fa01 f202 	lsl.w	r2, r1, r2
 8000838:	4611      	mov	r1, r2
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <GPIO_IRQITConfig+0xf4>)
 800083c:	430b      	orrs	r3, r1
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	e025      	b.n	800088e <GPIO_IRQITConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64)
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b1f      	cmp	r3, #31
 8000846:	d90f      	bls.n	8000868 <GPIO_IRQITConfig+0xc0>
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	2b3f      	cmp	r3, #63	; 0x3f
 800084c:	d80c      	bhi.n	8000868 <GPIO_IRQITConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <GPIO_IRQITConfig+0x100>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	f002 021f 	and.w	r2, r2, #31
 8000858:	2101      	movs	r1, #1
 800085a:	fa01 f202 	lsl.w	r2, r1, r2
 800085e:	4611      	mov	r1, r2
 8000860:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <GPIO_IRQITConfig+0x100>)
 8000862:	430b      	orrs	r3, r1
 8000864:	6013      	str	r3, [r2, #0]
 8000866:	e012      	b.n	800088e <GPIO_IRQITConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b3f      	cmp	r3, #63	; 0x3f
 800086c:	d90f      	bls.n	800088e <GPIO_IRQITConfig+0xe6>
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b5f      	cmp	r3, #95	; 0x5f
 8000872:	d80c      	bhi.n	800088e <GPIO_IRQITConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <GPIO_IRQITConfig+0x104>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	79fa      	ldrb	r2, [r7, #7]
 800087a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800087e:	2101      	movs	r1, #1
 8000880:	fa01 f202 	lsl.w	r2, r1, r2
 8000884:	4611      	mov	r1, r2
 8000886:	4a09      	ldr	r2, [pc, #36]	; (80008ac <GPIO_IRQITConfig+0x104>)
 8000888:	430b      	orrs	r3, r1
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	e7ff      	b.n	800088e <GPIO_IRQITConfig+0xe6>
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e100 	.word	0xe000e100
 80008a0:	e000e104 	.word	0xe000e104
 80008a4:	e000e108 	.word	0xe000e108
 80008a8:	e000e184 	.word	0xe000e184
 80008ac:	e000e188 	.word	0xe000e188

080008b0 <GPIO_IRQPriorityConfig>:
 * @Note			- none
 *
 */

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
	// 1. find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	089b      	lsrs	r3, r3, #2
 80008c4:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	73bb      	strb	r3, [r7, #14]


	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 80008ce:	7bbb      	ldrb	r3, [r7, #14]
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	3304      	adds	r3, #4
 80008d6:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + (iprx * 4)) |= (IRQPriority << shift_amount);
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	011b      	lsls	r3, r3, #4
 80008dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008e0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	79b9      	ldrb	r1, [r7, #6]
 80008e8:	7b7b      	ldrb	r3, [r7, #13]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	4619      	mov	r1, r3
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008f8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008fc:	430a      	orrs	r2, r1
 80008fe:	601a      	str	r2, [r3, #0]

}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <GPIO_IRQHandling>:
 * @Note			- none
 *
 */

void GPIO_IRQHandling(uint8_t PinNumber)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	// clear the exti pr register corresponding to the pin number
	if(EXTI->PR & (1 << PinNumber))
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <GPIO_IRQHandling+0x3c>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	79fa      	ldrb	r2, [r7, #7]
 800091c:	2101      	movs	r1, #1
 800091e:	fa01 f202 	lsl.w	r2, r1, r2
 8000922:	4013      	ands	r3, r2
 8000924:	2b00      	cmp	r3, #0
 8000926:	d009      	beq.n	800093c <GPIO_IRQHandling+0x30>
	{
		// clear
		EXTI->PR |= (1 << PinNumber);
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <GPIO_IRQHandling+0x3c>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	79fa      	ldrb	r2, [r7, #7]
 800092e:	2101      	movs	r1, #1
 8000930:	fa01 f202 	lsl.w	r2, r1, r2
 8000934:	4611      	mov	r1, r2
 8000936:	4a04      	ldr	r2, [pc, #16]	; (8000948 <GPIO_IRQHandling+0x3c>)
 8000938:	430b      	orrs	r3, r1
 800093a:	6153      	str	r3, [r2, #20]
	}
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	40013c00 	.word	0x40013c00

0800094c <memset>:
 800094c:	4402      	add	r2, r0
 800094e:	4603      	mov	r3, r0
 8000950:	4293      	cmp	r3, r2
 8000952:	d100      	bne.n	8000956 <memset+0xa>
 8000954:	4770      	bx	lr
 8000956:	f803 1b01 	strb.w	r1, [r3], #1
 800095a:	e7f9      	b.n	8000950 <memset+0x4>

0800095c <__libc_init_array>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	4d0d      	ldr	r5, [pc, #52]	; (8000994 <__libc_init_array+0x38>)
 8000960:	4c0d      	ldr	r4, [pc, #52]	; (8000998 <__libc_init_array+0x3c>)
 8000962:	1b64      	subs	r4, r4, r5
 8000964:	10a4      	asrs	r4, r4, #2
 8000966:	2600      	movs	r6, #0
 8000968:	42a6      	cmp	r6, r4
 800096a:	d109      	bne.n	8000980 <__libc_init_array+0x24>
 800096c:	4d0b      	ldr	r5, [pc, #44]	; (800099c <__libc_init_array+0x40>)
 800096e:	4c0c      	ldr	r4, [pc, #48]	; (80009a0 <__libc_init_array+0x44>)
 8000970:	f000 f818 	bl	80009a4 <_init>
 8000974:	1b64      	subs	r4, r4, r5
 8000976:	10a4      	asrs	r4, r4, #2
 8000978:	2600      	movs	r6, #0
 800097a:	42a6      	cmp	r6, r4
 800097c:	d105      	bne.n	800098a <__libc_init_array+0x2e>
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f855 3b04 	ldr.w	r3, [r5], #4
 8000984:	4798      	blx	r3
 8000986:	3601      	adds	r6, #1
 8000988:	e7ee      	b.n	8000968 <__libc_init_array+0xc>
 800098a:	f855 3b04 	ldr.w	r3, [r5], #4
 800098e:	4798      	blx	r3
 8000990:	3601      	adds	r6, #1
 8000992:	e7f2      	b.n	800097a <__libc_init_array+0x1e>
 8000994:	080009bc 	.word	0x080009bc
 8000998:	080009bc 	.word	0x080009bc
 800099c:	080009bc 	.word	0x080009bc
 80009a0:	080009c0 	.word	0x080009c0

080009a4 <_init>:
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a6:	bf00      	nop
 80009a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009aa:	bc08      	pop	{r3}
 80009ac:	469e      	mov	lr, r3
 80009ae:	4770      	bx	lr

080009b0 <_fini>:
 80009b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b2:	bf00      	nop
 80009b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009b6:	bc08      	pop	{r3}
 80009b8:	469e      	mov	lr, r3
 80009ba:	4770      	bx	lr
